[workspace]
members = [
    ".",
    "sqlx-core",
    "sqlx-macros",
    "sqlx-macros-core",
    "sqlx-test",
    "sqlx-cli",
    #    "sqlx-bench",
    "sqlx-postgres",
    "examples/postgres/axum-social-with-tests",
    "examples/postgres/chat",
    "examples/postgres/files",
    "examples/postgres/json",
    "examples/postgres/listen",
    "examples/postgres/mockable-todos",
    "examples/postgres/multi-database",
    "examples/postgres/multi-tenant",
    "examples/postgres/preferred-crates",
    "examples/postgres/todos",
    "examples/postgres/transaction",
]

[workspace.package]
version = "0.9.0-alpha.1"
license = "MIT OR Apache-2.0"
# TODO: upgrade to edition 2024 (after merging all pending PRs)
edition = "2021"
repository = "https://github.com/launchbadge/sqlx"
keywords = ["database", "async", "postgres"]
categories = ["database", "asynchronous"]
authors = [
    "Ryan Leckey <leckey.ryan@gmail.com>",
    "Austin Bonander <austin.bonander@gmail.com>",
    "Chloe Ross <orangesnowfox@gmail.com>",
    "Daniel Akhterov <akhterovd@gmail.com>",
]
rust-version = "1.86.0"

[package]
name = "sqlx"
readme = "README.md"
documentation = "https://docs.rs/sqlx"
description = "ðŸ§° The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL."
version.workspace = true
license.workspace = true
edition.workspace = true
authors.workspace = true
repository.workspace = true
rust-version.workspace = true

# Note: written so that it may be copy-pasted to other crates
[package.metadata.docs.rs]
features = ["_unstable-docs"]
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["any", "macros", "migrate", "json"]

derive = ["sqlx-macros/derive"]
macros = ["derive", "sqlx-macros/macros"]
migrate = ["sqlx-core/migrate", "sqlx-macros?/migrate", "sqlx-postgres?/migrate"]

# Enable parsing of `sqlx.toml` for configuring macros and migrations.
sqlx-toml = ["sqlx-core/sqlx-toml", "sqlx-macros?/sqlx-toml"]

# intended mainly for CI and docs
all-databases = ["postgres", "any"]
_unstable-all-types = [
    "bigdecimal",
    "rust_decimal",
    "json",
    "time",
    "chrono",
    "ipnet",
    "ipnetwork",
    "mac_address",
    "uuid",
    "bit-vec",
    "bstr"
]

# Render documentation that wouldn't otherwise be shown (e.g. `sqlx_core::config`).
_unstable-docs = [
    "all-databases",
    "_unstable-all-types"
]

# Base runtime features without TLS
runtime-async-global-executor = ["_rt-async-global-executor", "sqlx-core/_rt-async-global-executor", "sqlx-macros?/_rt-async-global-executor"]
runtime-async-std = ["_rt-async-std", "sqlx-core/_rt-async-std", "sqlx-macros?/_rt-async-std"]
runtime-smol = ["_rt-smol", "sqlx-core/_rt-smol", "sqlx-macros?/_rt-smol"]
runtime-tokio = ["_rt-tokio", "sqlx-core/_rt-tokio", "sqlx-macros?/_rt-tokio"]

# TLS features
tls-native-tls = ["sqlx-core/_tls-native-tls", "sqlx-macros?/_tls-native-tls"]
tls-rustls = ["tls-rustls-ring"] # For backwards compatibility
tls-rustls-aws-lc-rs = ["sqlx-core/_tls-rustls-aws-lc-rs", "sqlx-macros?/_tls-rustls-aws-lc-rs"]
tls-rustls-ring = ["tls-rustls-ring-webpki"] # For backwards compatibility
tls-rustls-ring-webpki = ["sqlx-core/_tls-rustls-ring-webpki", "sqlx-macros?/_tls-rustls-ring-webpki"]
tls-rustls-ring-native-roots = ["sqlx-core/_tls-rustls-ring-native-roots", "sqlx-macros?/_tls-rustls-ring-native-roots"]

# No-op feature used by the workflows to compile without TLS enabled. Not meant for general use.
tls-none = []

# for conditional compilation
_rt-async-global-executor = []
_rt-async-std = []
_rt-smol = []
_rt-tokio = []

# database
any = ["sqlx-core/any", "sqlx-postgres?/any"]
postgres = ["sqlx-postgres", "sqlx-macros?/postgres"]

# types
json = ["sqlx-core/json", "sqlx-macros?/json", "sqlx-postgres?/json"]

bigdecimal = ["sqlx-core/bigdecimal", "sqlx-macros?/bigdecimal", "sqlx-postgres?/bigdecimal"]
bit-vec = ["sqlx-core/bit-vec", "sqlx-macros?/bit-vec", "sqlx-postgres?/bit-vec"]
chrono = ["sqlx-core/chrono", "sqlx-macros?/chrono", "sqlx-postgres?/chrono"]
ipnet = ["sqlx-core/ipnet", "sqlx-macros?/ipnet", "sqlx-postgres?/ipnet"]
ipnetwork = ["sqlx-core/ipnetwork", "sqlx-macros?/ipnetwork", "sqlx-postgres?/ipnetwork"]
mac_address = ["sqlx-core/mac_address", "sqlx-macros?/mac_address", "sqlx-postgres?/mac_address"]
rust_decimal = ["sqlx-core/rust_decimal", "sqlx-macros?/rust_decimal", "sqlx-postgres?/rust_decimal"]
time = ["sqlx-core/time", "sqlx-macros?/time", "sqlx-postgres?/time"]
uuid = ["sqlx-core/uuid", "sqlx-macros?/uuid", "sqlx-postgres?/uuid"]
regexp = []
bstr = ["sqlx-core/bstr"]

[workspace.dependencies]
# Core Crates
sqlx-core = { version = "=0.9.0-alpha.1", path = "sqlx-core" }
sqlx-macros-core = { version = "=0.9.0-alpha.1", path = "sqlx-macros-core" }
sqlx-macros = { version = "=0.9.0-alpha.1", path = "sqlx-macros" }

# Driver crates
sqlx-postgres = { version = "=0.9.0-alpha.1", path = "sqlx-postgres" }

# Facade crate (for reference from sqlx-cli)
sqlx = { version = "=0.9.0-alpha.1", path = ".", default-features = false }

# Common type integrations shared by multiple driver crates.
# These are optional unless enabled in a workspace crate.
bigdecimal = "0.4.0"
bit-vec = "0.6.3"
chrono = { version = "0.4.34", default-features = false, features = ["std", "clock"] }
ipnet = "2.3.0"
ipnetwork = "0.21.1"
mac_address = "1.1.5"
rust_decimal = { version = "1.26.1", default-features = false, features = ["std"] }
time = { version = "0.3.36", features = ["formatting", "parsing", "macros"] }
uuid = "1.1.2"

# Common utility crates
cfg-if = "1.0.0"
dotenvy = { version = "0.15.0", default-features = false }

# Runtimes
[workspace.dependencies.async-global-executor]
version = "3.1"
default-features = false
features = ["async-io"]

[workspace.dependencies.async-std]
version = "1.13"

[workspace.dependencies.smol]
version = "2.0"
default-features = false

[workspace.dependencies.tokio]
version = "1"
features = ["time", "net", "sync", "fs", "io-util", "rt"]
default-features = false

[dependencies]
sqlx-core = { workspace = true, features = ["offline", "migrate"] }
sqlx-macros = { workspace = true, optional = true }

sqlx-postgres = { workspace = true, optional = true }

[dev-dependencies]
anyhow = "1.0.52"
time_ = { version = "0.3.2", package = "time" }
futures-util = { version = "0.3.19", default-features = false, features = ["alloc"] }
env_logger = "0.11"
async-std = { workspace = true, features = ["attributes"] }
tokio = { version = "1.15.0", features = ["full"] }
dotenvy = "0.15.0"
trybuild = "1.0.53"
sqlx-test = { path = "./sqlx-test" }
paste = "1.0.6"
serde = { version = "1.0.132", features = ["derive"] }
serde_json = "1.0.73"
url = "2.2.2"
rand = "0.8.4"
rand_xoshiro = "0.6.0"
hex = "0.4.3"
tempfile = "3.10.1"
criterion = { version = "0.5.1", features = ["async_tokio"] }

# Common lint settings for the workspace
[workspace.lints.clippy]
# https://github.com/launchbadge/sqlx/issues/3440
cast_possible_truncation = 'deny'
cast_possible_wrap = 'deny'
cast_sign_loss = 'deny'
# See `clippy.toml`
disallowed_methods = 'deny'


[lints.rust.unexpected_cfgs]
level = 'warn'
check-cfg = [
    'cfg(postgres, values(any()))'
]

#
# Any
#

[[test]]
name = "any"
path = "tests/any/any.rs"
required-features = ["any"]

[[test]]
name = "any-pool"
path = "tests/any/pool.rs"
required-features = ["any"]

#
# Migrations
#

[[test]]
name = "migrate-macro"
path = "tests/migrate/macro.rs"
required-features = ["macros", "migrate"]

#
# PostgreSQL
#

[[test]]
name = "postgres"
path = "tests/postgres/postgres.rs"
required-features = ["postgres"]

[[test]]
name = "postgres-types"
path = "tests/postgres/types.rs"
required-features = ["postgres"]

[[test]]
name = "postgres-describe"
path = "tests/postgres/describe.rs"
required-features = ["postgres"]

[[test]]
name = "postgres-macros"
path = "tests/postgres/macros.rs"
required-features = ["postgres", "macros"]

[[test]]
name = "postgres-derives"
path = "tests/postgres/derives.rs"
required-features = ["postgres", "macros"]

[[test]]
name = "postgres-error"
path = "tests/postgres/error.rs"
required-features = ["postgres"]

[[test]]
name = "postgres-test-attr"
path = "tests/postgres/test-attr.rs"
required-features = ["postgres", "macros", "migrate"]

[[test]]
name = "postgres-migrate"
path = "tests/postgres/migrate.rs"
required-features = ["postgres", "macros", "migrate"]

[[test]]
name = "postgres-query-builder"
path = "tests/postgres/query_builder.rs"
required-features = ["postgres"]

[[test]]
name = "postgres-rustsec"
path = "tests/postgres/rustsec.rs"
required-features = ["postgres", "macros", "migrate"]
